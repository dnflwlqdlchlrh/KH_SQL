-- SET SERVEROUTPUT ON;
DECLARE
    VAR1 NUMBER;
    VAR2 VARCHAR2(30);
    VAR3 VARCHAR2(30);
BEGIN
    VAR1 := 100;
    VAR2 := 'Hello';
    VAR3 := &VAR3; -- 사용자 입력을 받아서 저장
    
    DBMS_OUTPUT.PUT_LINE(VAR1);
    DBMS_OUTPUT.PUT_LINE(VAR2);
    DBMS_OUTPUT.PUT_LINE(VAR3);
END;


DECLARE
    VAR1 NUMBER;
    USER_INPUT NUMBER;
BEGIN
	VAR1 := &USER_INPUT;
    IF(VAR1 > 10) THEN
        DBMS_OUTPUT.PUT_LINE('10보다 큰 값을 입력했습니다.');
    ELSIF(VAR1 = 10) THEN
        DBMS_OUTPUT.PUT_LINE('10을 입력했습니다.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('10보다 작은 값을 입력했습니다.');
    END IF;
END;


DECLARE
    VAR1 NUMBER;
    USER_INPUT NUMBER;
BEGIN
	VAR1 := &USER_INPUT;
    IF(MOD(VAR1, 2) = 0) THEN
        DBMS_OUTPUT.PUT_LINE('짝수 입니다.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('홀수 입니다.');
    END IF;
END;


DECLARE
    VAR1 NUMBER;
    USER_INPUT NUMBER;
BEGIN
	VAR1 := &USER_INPUT;
    -- LOOP 만 사용하면 무한반복
    LOOP
        DBMS_OUTPUT.PUT_LINE(VAR1);
        IF(VAR1 = 0) THEN
            EXIT;
        END IF;
        VAR1 := VAR1 - 1;
    END LOOP;
END;



DECLARE
    VAR1 NUMBER;
    USER_INPUT NUMBER;
BEGIN
	VAR1 := &USER_INPUT;
    
    FOR I IN 0..VAR1 LOOP
        DBMS_OUTPUT.PUT_LINE(VAR1 || '/' || I);
    END LOOP;
END;



DECLARE
    VAR1 NUMBER;
    USER_INPUT NUMBER;
BEGIN
	VAR1 := &USER_INPUT;
    
    FOR I IN REVERSE 0..VAR1 LOOP
        DBMS_OUTPUT.PUT_LINE(VAR1 || '/' || I);
    END LOOP;
END;



DECLARE
    VAR1 NUMBER;
    USER_INPUT NUMBER;
BEGIN
	VAR1 := &USER_INPUT;
    
    WHILE VAR1 > 0 LOOP
        DBMS_OUTPUT.PUT_LINE(VAR1);
        VAR1 := VAR1 - 1;
    END LOOP;
END;


DECLARE
    EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
    EMP_NAME1 EMPLOYEES.FIRST_NAME%TYPE;
    EMP_NAME2 EMPLOYEES.LAST_NAME%TYPE;
BEGIN
	FOR ID IN 100..199 LOOP
        SELECT EMPLOYEE_ID
             , FIRST_NAME
             , LAST_NAME
          INTO EMP_ID, EMP_NAME1, EMP_NAME2
          FROM EMPLOYEES
         WHERE EMPLOYEE_ID = ID;
    
        DBMS_OUTPUT.PUT_LINE(EMP_ID || ', ' || EMP_NAME1 || ', ' ||EMP_NAME2);
    END LOOP;
END;




DECLARE
    ROW_DATA EMPLOYEES%ROWTYPE;
BEGIN
	FOR ID IN 100..199 LOOP
        SELECT *
          INTO ROW_DATA
          FROM EMPLOYEES
         WHERE EMPLOYEE_ID = ID;
    
        DBMS_OUTPUT.PUT_LINE(ROW_DATA.EMPLOYEE_ID ||
            ', ' || ROW_DATA.FIRST_NAME || ', ' ||ROW_DATA.LAST_NAME);
    END LOOP;
END;



DECLARE
    TYPE EMP_ID_TABLE_TYPE   IS TABLE OF EMPLOYEES.EMPLOYEE_ID%TYPE
                                INDEX BY BINARY_INTEGER;
    TYPE EMP_NAME_TABLE_TYPE IS TABLE OF EMPLOYEES.FIRST_NAME%TYPE
                                INDEX BY BINARY_INTEGER;
    
    EMP_IDS   EMP_ID_TABLE_TYPE;
    EMP_NAMES EMP_NAME_TABLE_TYPE;
    
    IDX       BINARY_INTEGER := 0;
BEGIN
    FOR R_DATA IN (SELECT EMPLOYEE_ID, FIRST_NAME
                     FROM EMPLOYEES
                    WHERE EMPLOYEE_ID BETWEEN 100 AND 199) LOOP
        IDX := IDX + 1;
        EMP_IDS(IDX) := R_DATA.EMPLOYEE_ID;
        EMP_NAMES(IDX) := R_DATA.FIRST_NAME;
    END LOOP;
   
    FOR I IN 1..EMP_IDS.COUNT LOOP
    	DBMS_OUTPUT.PUT_LINE(EMP_IDS(I) || ', ' || EMP_NAMES(I));
    END LOOP;
END;



DECLARE
    TYPE EMP_ROW_TABLE_TYPE IS TABLE OF EMPLOYEES%ROWTYPE
                               INDEX BY BINARY_INTEGER;

    EMP_ROWS   EMP_ROW_TABLE_TYPE;
    
    IDX       BINARY_INTEGER := 0;
BEGIN
    FOR R_DATA IN (SELECT *
                     FROM EMPLOYEES
                    WHERE EMPLOYEE_ID BETWEEN 100 AND 199) LOOP
        IDX := IDX + 1;
        EMP_ROWS(IDX) := R_DATA;
    END LOOP;
   
    FOR I IN 1..EMP_ROWS.COUNT LOOP
    	DBMS_OUTPUT.PUT_LINE(EMP_ROWS(I).EMPLOYEE_ID ||
            ', ' || EMP_ROWS(I).FIRST_NAME);
    END LOOP;
END;


DECLARE
    TYPE EMP_RECORD_TYPE IS RECORD (
         ID          EMPLOYEES.EMPLOYEE_ID%TYPE
       , FIRST_NAME  EMPLOYEES.FIRST_NAME%TYPE
       , LAST_NAME   EMPLOYEES.LAST_NAME%TYPE
       , SALARY      EMPLOYEES.SALARY%TYPE
       , DEPART_ID   DEPARTMENTS.DEPARTMENT_ID%TYPE
       , DEPART_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE
    );
   
    TYPE EMP_TABLE_TYPE IS TABLE OF EMP_RECORD_TYPE INDEX BY BINARY_INTEGER;

    EMP_TABLE   EMP_TABLE_TYPE;
    IDX BINARY_INTEGER := 0;
BEGIN
    SELECT E.EMPLOYEE_ID
         , E.FIRST_NAME
         , E.LAST_NAME
         , E.SALARY
         , D.DEPARTMENT_ID
         , D.DEPARTMENT_NAME
      BULK COLLECT INTO EMP_TABLE
      FROM EMPLOYEES E JOIN DEPARTMENTS D
        ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

    FOR REC IN 1..EMP_TABLE.COUNT LOOP
    	DBMS_OUTPUT.PUT_LINE(EMP_TABLE(REC).ID);
    END LOOP;
END;